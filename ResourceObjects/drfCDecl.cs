///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2005-2014 Laszlo Arvai. All rights reserved.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
///////////////////////////////////////////////////////////////////////////////
// File description
// ----------------
// C header generation class
///////////////////////////////////////////////////////////////////////////////
using System;
using System.IO;

public class drfCDecl : drfBaseClass
{
	#region · Data Members ·
	string m_file_name;
	#endregion

	#region · Constructor&Destructor ·
	/// <summary>
	/// Constructor
	/// </summary>
	public drfCDecl() : base(0,"cdecl")
  {
  }

	#endregion

	#region · Message handlers ·
	/// <summary>
	/// Message handler
	/// </summary>
	/// <param name="in_message"></param>
	/// <returns></returns>
	protected override int ProcessMessage(drfmsgMessageBase in_message)
  {
    switch (in_message.MessageType)
    {
      case drfmsgMessageBase.drfmsgProcessCommandLine:
        return msgProcessCommandLine((drfmsgProcessCommandLine)in_message);

      case drfmsgMessageBase.drfmsgPrepareBinaryData:
        return msgPrepareBinaryData((drfmsgPrepareBinaryData)in_message);

      case drfmsgMessageBase.drfmsgUpdateBinaryData:
        return msgUpdateBinaryData((drfmsgUpdateBinaryData)in_message);

      case drfmsgMessageBase.drfmsgDisplayHelpMessage:
        return msgDisplayHelpMessage((drfmsgDisplayHelpMessage)in_message);
    }

    return 0;
  }

  /// <summary>
  /// Updates binary data
  /// </summary>
  /// <param name="in_message"></param>
  /// <returns></returns>
  private int msgUpdateBinaryData(drfmsgUpdateBinaryData in_message)
  {
    string file_name;
    int first_file_position;
    UInt32 class_id;
    string class_name;
    
    // get settings from linker script
    string address_mode = m_parent_class.LinkerScript.GetLinkerSettings("addressmode").Trim().ToLower();

    // generate file id
    file_name = Path.GetFileName(m_file_name);
    file_name = file_name.Replace(' ', '_');
    file_name = file_name.Replace('.', '_');
    file_name = "__" + file_name + "__";

    // create C style header file
    TextWriter file = new StreamWriter(m_file_name,false);

    // start of file
		file.WriteLine("//#cdecl");
		file.WriteLine("///////////////////////////////////////////////////////////////////////////////");
		file.WriteLine("// This header file was generated by the Domino OS Resource Linker");
		file.WriteLine("// at " + DateTime.Now.ToString());
		file.WriteLine();
		file.WriteLine("#ifndef " + file_name);
    file.WriteLine("#define " + file_name );
    file.WriteLine();																	 
    
    // write comment header
    file.WriteLine("// Parameters");
    file.WriteLine("//#addressmode:" + address_mode );
    file.WriteLine("//#outputfile:" + Path.GetFileName(m_parent_class.LinkerScript.OutputFileName) );
    
    file.WriteLine();

		// write settings header
		if (string.Compare(address_mode, "absolute", true) == 0)
		{
			file.WriteLine("#define PAR_ADDRESS_ABSOLUTE");
		}
		else
		{
			file.WriteLine("#define PAR_ADDRESS_RELATIVE");
		}

		file.WriteLine();

		// write declarations
    drfmsgGetIdentifier message = new drfmsgGetIdentifier();

    class_id = 0;
    first_file_position = 0;
    foreach (drfBaseClass cls in m_parent_class.Classes)
    {
      // store position of the first class of given type
      if (cls.GetClassID() != class_id)
      {
        class_id = cls.GetClassID();
        class_name = cls.GetClassName();
        first_file_position = cls.GetFilePosition();

        file.WriteLine();
        file.WriteLine("///////////////////////////////////////////////////////////////////////////////");
        file.WriteLine("//#chunkid:0x" + class_id.ToString("x8") + " (" + class_name + ")");
      }

      // ask class for id
      message.Identifier = "";

      cls.BaseProcessMessage(message);

      if (message.Identifier.Length > 0)
      {
        if(address_mode == "relative")
          file.WriteLine("#define REF_" + message.Identifier + " " + (cls.GetFilePosition() - first_file_position).ToString());
        else
          file.WriteLine("#define REF_" + message.Identifier + " " + cls.GetFilePosition().ToString());
      }
    }

    // end of file
    file.WriteLine();
    file.WriteLine("#endif");
    file.WriteLine();

    file.Close();
    
    return 0;
  }

  /// <summary>
  /// Prepare binary data
  /// </summary>
  /// <param name="in_message"></param>
  /// <returns></returns>
  private int msgPrepareBinaryData(drfmsgPrepareBinaryData in_message)
  {
    // prepare binary data
    m_binary_buffer = new clsBinaryBuffer();

    return 0;
  }

  /// <summary>
  /// Processes command line switches
  /// </summary>
  /// <param name="in_message"></param>
  /// <returns></returns>
  private int msgProcessCommandLine(drfmsgProcessCommandLine in_message)
  {
    if (in_message.Command == "cdecl")
    {
      drfCDecl cdecl = new drfCDecl();
      m_parent_class.AddClass(cdecl);

      cdecl.m_file_name = in_message.Parameter;
      in_message.Used = true;
    }

    return 0;
  }

  /// <summary>
  /// Displays help message
  /// </summary>
  /// <param name="in_message"></param>
  /// <returns></returns>
  private int msgDisplayHelpMessage(drfmsgDisplayHelpMessage in_message)
  {
    Console.WriteLine(resString.UsageCDecl);

    return 0;
  }

  #endregion

  /// <summary>
  /// Returns file position priority index.
  /// </summary>
  /// <returns></returns>
  public override int GetFilePositionPriority()
  {
    return 0;
  }
}
